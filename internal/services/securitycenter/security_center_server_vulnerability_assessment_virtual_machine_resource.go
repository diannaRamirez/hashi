package securitycenter

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/security/mgmt/v3.0/security"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	computeParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/parse"
	computeValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)

const (
	computeProvider = "Microsoft.Compute"
	vmType          = "virtualMachines"
)

func resourceServerVulnerabilityAssessmentVirtualMachine() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Create: resourceServerVulnerabilityAssessmentVirtualMachineCreate,
		Read:   resourceServerVulnerabilityAssessmentVirtualMachineRead,
		Delete: resourceServerVulnerabilityAssessmentVirtualMachineDelete,

		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			_, err := parse.VulnerabilityAssessmentVmID(id)
			return err
		}),

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(5 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(10 * time.Minute),
		},

		Schema: map[string]*pluginsdk.Schema{
			"virtual_machine_id": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: computeValidate.VirtualMachineID,
			},
		},
	}
}

func resourceServerVulnerabilityAssessmentVirtualMachineCreate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.ServerVulnerabilityAssessmentClient
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	virtualMachineId, err := computeParse.VirtualMachineID(d.Get("virtual_machine_id").(string))
	if err != nil {
		return err
	}

	vulnerabilityAssessment, err := client.Get(ctx, virtualMachineId.ResourceGroup, computeProvider, vmType, virtualMachineId.Name)
	if err != nil {
		if !utils.ResponseWasNotFound(vulnerabilityAssessment.Response) {
			return fmt.Errorf("checking for presence of existing Advanced Threat Protection for %s: %+v", *virtualMachineId, err)
		}
	}

	if vulnerabilityAssessment.ID != nil && *vulnerabilityAssessment.ID != "" {
		return tf.ImportAsExistsError("azurerm_security_center_server_vulnerability_assessment_virtual_machine", *vulnerabilityAssessment.ID)
	}

	vulnerabilityAssessment, err = client.CreateOrUpdate(ctx, virtualMachineId.ResourceGroup, computeProvider, vmType, virtualMachineId.Name)
	if err != nil {
		return fmt.Errorf("create Server Vulnerability Assessment for %s: %+v", *virtualMachineId, err)
	}

	id := parse.NewVulnerabilityAssessmentVmID(virtualMachineId.SubscriptionId, virtualMachineId.ResourceGroup, virtualMachineId.Name, "Default")
	d.SetId(id.ID())

	timeout := pluginsdk.TimeoutUpdate
	if d.IsNewResource() {
		timeout = pluginsdk.TimeoutCreate
	}

	stateConf := &pluginsdk.StateChangeConf{
		Pending:    []string{string(security.ProvisioningState1Provisioning)},
		Target:     []string{string(security.ProvisioningState1Succeeded)},
		Refresh:    serverVulnerabilityAssessmentVirtualMachineStateRefreshFunc(ctx, client, id.ResourceGroup, id.VirtualMachineName),
		Timeout:    d.Timeout(timeout),
		MinTimeout: 15 * time.Second,
	}

	if _, err := stateConf.WaitForStateContext(ctx); err != nil {
		return fmt.Errorf("waiting for the completion of the creating/updating of %s: %+v", id, err)
	}

	return resourceServerVulnerabilityAssessmentVirtualMachineRead(d, meta)
}

func resourceServerVulnerabilityAssessmentVirtualMachineRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.ServerVulnerabilityAssessmentClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.VulnerabilityAssessmentVmID(d.Id())
	if err != nil {
		return err
	}

	var virtualMachineId *computeParse.VirtualMachineId
	if id.ID() != "" {
		newVirtualMachineId := computeParse.NewVirtualMachineID(id.SubscriptionId, id.ResourceGroup, id.VirtualMachineName)
		virtualMachineId = &newVirtualMachineId
	} else {
		newVirtualMachineId, err := computeParse.VirtualMachineID(d.Get("virtual_machine_id").(string))
		if err != nil {
			return err
		}
		virtualMachineId = newVirtualMachineId
	}

	resp, err := client.Get(ctx, virtualMachineId.ResourceGroup, computeProvider, vmType, virtualMachineId.Name)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("Server Vulnerability Assessment was not found for %s: %+v", virtualMachineId, err)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving Server Vulnerability Assessment status for %s: %+v", virtualMachineId, err)
	}

	d.SetId(id.ID())
	d.Set("virtual_machine_id", virtualMachineId.ID())

	return nil
}

func resourceServerVulnerabilityAssessmentVirtualMachineDelete(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.ServerVulnerabilityAssessmentClient
	ctx, cancel := timeouts.ForDelete(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.VulnerabilityAssessmentVmID(d.Id())
	if err != nil {
		return err
	}

	// Cannot delete if still in provisioning state. Wait for it to complete.
	stateConf := &pluginsdk.StateChangeConf{
		Pending:    []string{string(security.ProvisioningState1Provisioning)},
		Target:     []string{string(security.ProvisioningState1Succeeded)},
		Refresh:    serverVulnerabilityAssessmentVirtualMachineStateRefreshFunc(ctx, client, id.ResourceGroup, id.VirtualMachineName),
		Timeout:    d.Timeout(pluginsdk.TimeoutDelete),
		MinTimeout: 15 * time.Second,
	}

	if _, err := stateConf.WaitForStateContext(ctx); err != nil {
		return fmt.Errorf("waiting for the completion of the creation of %s: %+v", id, err)
	}

	future, err := client.Delete(ctx, id.ResourceGroup, computeProvider, vmType, id.VirtualMachineName)
	if err != nil {
		return fmt.Errorf("deleting Server Vulnerability Assessment %s: %v", *id, err)
	}
	if err := future.WaitForCompletionRef(ctx, client.Client); err != nil {
		return fmt.Errorf("waiting for deletion of Server Vulnerability Assessment %s: %v", *id, err)
	}
	return nil
}

func serverVulnerabilityAssessmentVirtualMachineStateRefreshFunc(ctx context.Context, client *security.ServerVulnerabilityAssessmentClient, resourceGroup, name string) pluginsdk.StateRefreshFunc {
	return func() (interface{}, string, error) {

		res, err := client.Get(ctx, resourceGroup, computeProvider, vmType, name)
		for retry := 1; err != nil && retry < 20; retry++ {
			time.Sleep(time.Duration(retry) * time.Second)
			res, err = client.Get(ctx, resourceGroup, computeProvider, vmType, name)
		}

		log.Printf("Server Vulnerability Assessment %q (Resource Group %q) returned Status %d", resourceGroup, name, res.StatusCode)

		if err != nil {
			if utils.ResponseWasNotFound(res.Response) {
				return res, "NotFound", nil
			}
			return nil, "", fmt.Errorf("polling for the Provisioning State of the Server Vulnerability Assessment %q (RG: %q): %+v", name, resourceGroup, err)
		}

		if res.ServerVulnerabilityAssessmentProperties == nil {
			return res, "", fmt.Errorf("polling for the Provisioning State of the Server Vulnerability Assessment %q (RG: %q): %+v", name, resourceGroup, err)
		}

		return res, string(res.ServerVulnerabilityAssessmentProperties.ProvisioningState), nil
	}
}
