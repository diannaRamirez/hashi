package securitycenter

import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/Azure/azure-sdk-for-go/services/preview/security/mgmt/v3.0/security"
	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	computeParse "github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/parse"
	computeValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/validate"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
	"github.com/hashicorp/terraform-provider-azurerm/utils"
)

const (
	hybridProvider = "Microsoft.HybridCompute"
	hybridType     = "machines"
)

func resourceHybridVMServerVulnerabilityAssessment() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Create: resourceHybridVMServerVulnerabilityAssessmentCreate,
		Read:   resourceHybridVMServerVulnerabilityAssessmentRead,
		Delete: resourceHybridVMServerVulnerabilityAssessmentDelete,

		// TODO: replace this with an importer which validates the ID during import
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(5 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(10 * time.Minute),
		},

		Schema: map[string]*pluginsdk.Schema{
			"hybrid_machine_id": {
				Type:         pluginsdk.TypeString,
				Optional:     true,
				ForceNew:     true,
				ValidateFunc: computeValidate.HybridMachineID,
			},
		},
	}
}

func resourceHybridVMServerVulnerabilityAssessmentCreate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.ServerVulnerabilityAssessmentClient
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	hybridMachineId, err := computeParse.HybridMachineID(d.Get("hybrid_machine_id").(string))
	if err != nil {
		return err
	}

	vulnerabilityAssessment, err := client.Get(ctx, hybridMachineId.ResourceGroup, hybridProvider, hybridType, hybridMachineId.MachineName)
	if err != nil {
		if !utils.ResponseWasNotFound(vulnerabilityAssessment.Response) {
			return fmt.Errorf("checking for presence of existing Advanced Threat Protection for %s: %+v", *hybridMachineId, err)
		}
	}

	if vulnerabilityAssessment.ID != nil && *vulnerabilityAssessment.ID != "" {
		return tf.ImportAsExistsError("azurerm_security_center_server_vulnerability_assessment", *vulnerabilityAssessment.ID)
	}

	vulnerabilityAssessment, err = client.CreateOrUpdate(ctx, hybridMachineId.ResourceGroup, hybridProvider, hybridType, hybridMachineId.MachineName)
	if err != nil {
		return fmt.Errorf("create Server Vulnerability Assessment for %s: %+v", *hybridMachineId, err)
	}

	if vulnerabilityAssessment.ID != nil {
		d.SetId(*vulnerabilityAssessment.ID)
	}

	// Take some time for resource to be visible after creating. Hence the retry logic
	readError := resourceServerVulnerabilityAssessmentRead(d, meta)
	for retry := 1; d.Id() == "" && retry < 11; retry++ {
		time.Sleep(time.Duration(retry) * time.Second)
		readError = resourceServerVulnerabilityAssessmentRead(d, meta)
	}
	return readError
}

func resourceHybridVMServerVulnerabilityAssessmentRead(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.ServerVulnerabilityAssessmentClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	hybridMachineId, err := computeParse.HybridMachineID(d.Get("hybrid_machine_id").(string))
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, hybridMachineId.ResourceGroup, hybridProvider, hybridType, hybridMachineId.MachineName)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("Server Vulnerability Assessment was not found for %s: %+v", *hybridMachineId, err)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving Server Vulnerability Assessment status for %s: %+v", *hybridMachineId, err)
	}

	// Update state
	d.SetId(*resp.ID)

	// Handle import
	d.Set("hybrid_machine_id", hybridMachineId.ID())

	return nil
}

func resourceHybridVMServerVulnerabilityAssessmentDelete(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.ServerVulnerabilityAssessmentClient
	ctx, cancel := timeouts.ForDelete(meta.(*clients.Client).StopContext, d)
	defer cancel()

	hybridMachineId, err := computeParse.HybridMachineID(d.Get("hybrid_machine_id").(string))
	if err != nil {
		return err
	}

	// Can not delete if still in provisioning state. Wait for it to complete.
	for retry := 1; retry <= 20; retry++ {
		response, err := client.Get(ctx, hybridMachineId.ResourceGroup, hybridProvider, hybridType, hybridMachineId.MachineName)
		if err != nil || response.ProvisioningState != security.ProvisioningState1Provisioning {
			break
		}
		time.Sleep(time.Duration(retry) * time.Second)
	}

	future, err := client.Delete(ctx, hybridMachineId.ResourceGroup, hybridProvider, hybridType, hybridMachineId.MachineName)
	if err != nil {
		return fmt.Errorf("deleting Server Vulnerability Assessment %s: %v", *hybridMachineId, err)
	}
	if err := future.WaitForCompletionRef(ctx, client.Client); err != nil {
		return fmt.Errorf("waiting for deletion of Server Vulnerability Assessment %s: %v", *hybridMachineId, err)
	}
	return nil
}
