package parse

// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten

import (
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
)

type VulnerabilityAssessmentArcVmId struct {
	SubscriptionId                    string
	ResourceGroup                     string
	MachineName                       string
	ServerVulnerabilityAssessmentName string
}

func NewVulnerabilityAssessmentArcVmID(subscriptionId, resourceGroup, machineName, serverVulnerabilityAssessmentName string) VulnerabilityAssessmentArcVmId {
	return VulnerabilityAssessmentArcVmId{
		SubscriptionId:                    subscriptionId,
		ResourceGroup:                     resourceGroup,
		MachineName:                       machineName,
		ServerVulnerabilityAssessmentName: serverVulnerabilityAssessmentName,
	}
}

func (id VulnerabilityAssessmentArcVmId) String() string {
	segments := []string{
		fmt.Sprintf("Server Vulnerability Assessment Name %q", id.ServerVulnerabilityAssessmentName),
		fmt.Sprintf("Machine Name %q", id.MachineName),
		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
	}
	segmentsStr := strings.Join(segments, " / ")
	return fmt.Sprintf("%s: (%s)", "Vulnerability Assessment Arc Vm", segmentsStr)
}

func (id VulnerabilityAssessmentArcVmId) ID() string {
	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.HybridCompute/machines/%s/providers/Microsoft.Security/serverVulnerabilityAssessments/%s"
	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.MachineName, id.ServerVulnerabilityAssessmentName)
}

// VulnerabilityAssessmentArcVmID parses a VulnerabilityAssessmentArcVm ID into an VulnerabilityAssessmentArcVmId struct
func VulnerabilityAssessmentArcVmID(input string) (*VulnerabilityAssessmentArcVmId, error) {
	id, err := resourceids.ParseAzureResourceID(input)
	if err != nil {
		return nil, err
	}

	resourceId := VulnerabilityAssessmentArcVmId{
		SubscriptionId: id.SubscriptionID,
		ResourceGroup:  id.ResourceGroup,
	}

	if resourceId.SubscriptionId == "" {
		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
	}

	if resourceId.ResourceGroup == "" {
		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
	}

	if resourceId.MachineName, err = id.PopSegment("machines"); err != nil {
		return nil, err
	}
	if resourceId.ServerVulnerabilityAssessmentName, err = id.PopSegment("serverVulnerabilityAssessments"); err != nil {
		return nil, err
	}

	if err := id.ValidateNoEmptySegments(input); err != nil {
		return nil, err
	}

	return &resourceId, nil
}
