// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

package dashboard

import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/location"
	"github.com/hashicorp/go-azure-sdk/resource-manager/dashboard/2023-09-01/grafanaresource"
	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)

type DashboardGrafanaDataSource struct{}

type DashboardGrafanaDataSourceModel struct {
	Name                              string                                            `tfschema:"name"`
	ResourceGroupName                 string                                            `tfschema:"resource_group_name"`
	ApiKeyEnabled                     bool                                              `tfschema:"api_key_enabled"`
	AutoGeneratedDomainNameLabelScope grafanaresource.AutoGeneratedDomainNameLabelScope `tfschema:"auto_generated_domain_name_label_scope"`
	DeterministicOutboundIPEnabled    bool                                              `tfschema:"deterministic_outbound_ip_enabled"`
	AzureMonitorWorkspaceIntegrations []AzureMonitorWorkspaceIntegrationModel           `tfschema:"azure_monitor_workspace_integrations"`
	Location                          string                                            `tfschema:"location"`
	PublicNetworkAccessEnabled        bool                                              `tfschema:"public_network_access_enabled"`
	Sku                               string                                            `tfschema:"sku"`
	Tags                              map[string]string                                 `tfschema:"tags"`
	ZoneRedundancyEnabled             bool                                              `tfschema:"zone_redundancy_enabled"`
	Endpoint                          string                                            `tfschema:"endpoint"`
	GrafanaVersion                    string                                            `tfschema:"grafana_version"`
	GrafanaMajorVersion               string                                            `tfschema:"grafana_major_version"`
	OutboundIPs                       []string                                          `tfschema:"outbound_ip"`
}

var _ sdk.DataSource = DashboardGrafanaDataSource{}

func (d DashboardGrafanaDataSource) ResourceType() string {
	return "azurerm_dashboard_grafana"
}

func (d DashboardGrafanaDataSource) ModelObject() interface{} {
	return &DashboardGrafanaDataSourceModel{}
}

func (d DashboardGrafanaDataSource) Arguments() map[string]*pluginsdk.Schema {
	return map[string]*pluginsdk.Schema{
		"name": {
			Type:     pluginsdk.TypeString,
			Required: true,
			ValidateFunc: validation.StringMatch(
				regexp.MustCompile(`^[a-zA-Z][-a-zA-Z\d]{0,21}[a-zA-Z\d]$`),
				`The name length must be from 2 to 23 characters. The name can only contain letters, numbers and dashes, and it must begin with a letter and end with a letter or digit.`,
			),
		},

		"resource_group_name": commonschema.ResourceGroupName(),
	}
}

func (d DashboardGrafanaDataSource) Attributes() map[string]*pluginsdk.Schema {
	return map[string]*pluginsdk.Schema{
		"location": commonschema.LocationComputed(),

		"api_key_enabled": {
			Type:     pluginsdk.TypeBool,
			Computed: true,
		},

		"auto_generated_domain_name_label_scope": {
			Type:     pluginsdk.TypeString,
			Computed: true,
		},

		"deterministic_outbound_ip_enabled": {
			Type:     pluginsdk.TypeBool,
			Computed: true,
		},

		"azure_monitor_workspace_integrations": {
			Type:     pluginsdk.TypeList,
			Computed: true,
			Elem: &pluginsdk.Resource{
				Schema: map[string]*pluginsdk.Schema{
					"resource_id": {
						Type:     pluginsdk.TypeString,
						Computed: true,
					},
				},
			},
		},

		"public_network_access_enabled": {
			Type:     pluginsdk.TypeBool,
			Computed: true,
		},

		"grafana_major_version": {
			Type:     pluginsdk.TypeString,
			Computed: true,
		},

		"sku": {
			Type:     pluginsdk.TypeString,
			Computed: true,
		},

		"tags": commonschema.TagsDataSource(),

		"zone_redundancy_enabled": {
			Type:     pluginsdk.TypeBool,
			Computed: true,
		},

		"endpoint": {
			Type:     pluginsdk.TypeString,
			Computed: true,
		},

		"grafana_version": {
			Type:     pluginsdk.TypeString,
			Computed: true,
		},

		"outbound_ip": {
			Type:     pluginsdk.TypeList,
			Computed: true,
			Elem: &pluginsdk.Schema{
				Type: pluginsdk.TypeString,
			},
		},
	}
}

func (d DashboardGrafanaDataSource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.Dashboard.GrafanaResourceClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			var dashboard DashboardGrafanaDataSourceModel
			if err := metadata.Decode(&dashboard); err != nil {
				return err
			}

			id := grafanaresource.NewGrafanaID(subscriptionId, dashboard.ResourceGroupName, dashboard.Name)

			resp, err := client.GrafanaGet(ctx, id)
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return fmt.Errorf("%s was not found", id)
				}
				return fmt.Errorf("reading %s: %+v", id, err)
			}

			if model := resp.Model; model != nil {
				dashboard.Location = location.NormalizeNilable(model.Location)

				if props := model.Properties; props != nil {
					if props.ApiKey != nil {
						if pointer.From(props.ApiKey) == grafanaresource.ApiKeyEnabled {
							dashboard.ApiKeyEnabled = true
						} else {
							dashboard.ApiKeyEnabled = false
						}
					}

					if props.DeterministicOutboundIP != nil {
						if pointer.From(props.DeterministicOutboundIP) == grafanaresource.DeterministicOutboundIPEnabled {
							dashboard.DeterministicOutboundIPEnabled = true
						} else {
							dashboard.DeterministicOutboundIPEnabled = false
						}
					}

					if props.Endpoint != nil {
						dashboard.Endpoint = pointer.From(props.Endpoint)
					}

					if props.GrafanaIntegrations != nil {
						dashboard.AzureMonitorWorkspaceIntegrations = FlattenAzureMonitorWorkspaceIntegrationModelArray(props.GrafanaIntegrations.AzureMonitorWorkspaceIntegrations)
					}

					if props.AutoGeneratedDomainNameLabelScope != nil {
						dashboard.AutoGeneratedDomainNameLabelScope = pointer.From(props.AutoGeneratedDomainNameLabelScope)
					}

					if props.GrafanaVersion != nil {
						dashboard.GrafanaVersion = pointer.From(props.GrafanaVersion)
					}

					if props.GrafanaMajorVersion != nil {
						dashboard.GrafanaMajorVersion = pointer.From(props.GrafanaMajorVersion)
					}

					if props.OutboundIPs != nil {
						dashboard.OutboundIPs = pointer.From(props.OutboundIPs)
					}

					if props.PublicNetworkAccess != nil {
						if pointer.From(props.PublicNetworkAccess) == grafanaresource.PublicNetworkAccessEnabled {
							dashboard.PublicNetworkAccessEnabled = true
						} else {
							dashboard.PublicNetworkAccessEnabled = false
						}
					}

					if props.ZoneRedundancy != nil {
						if pointer.From(props.ZoneRedundancy) == grafanaresource.ZoneRedundancyEnabled {
							dashboard.ZoneRedundancyEnabled = true
						} else {
							dashboard.ZoneRedundancyEnabled = false
						}
					}
				}
				if model.Sku != nil {
					dashboard.Sku = model.Sku.Name
				}

				if model.Tags != nil {
					dashboard.Tags = pointer.From(model.Tags)
				}
			}

			metadata.SetID(id)
			return metadata.Encode(&dashboard)
		},
	}
}
