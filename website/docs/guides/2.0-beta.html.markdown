---
layout: "azurerm"
page_title: "Azure Resource Manager: Opting into the 2.0 Beta"
description: |-
    Azure Resource Manager: Opting into Beta Functionality coming in version 2.0 of the Azure Provider

---

# Opting into Beta Functionality coming in version 2.0 of the Azure Provider

Version 2.0 of the Azure Provider will introduce several new features ([full details can be found in the 2.0 Upgrade Guide](/docs/providers/azurerm/guides/2.0-upgrade-guide.html)):

- Custom Timeouts for Data Sources & Resources
- New Resources for Virtual Machines & Virtual Machine Scale Sets
- Requiring Existing Resources to be Imported

Since both Azure and Terraform's Azure Provider move quickly - in order to continue rapidly shipping new features we've used Feature Toggles to gradually add support for the new functionality coming in version 2.0 of the Azure Provider as we've been developing 1.x versions of the Azure Provider.

What this means is that the most recent 1.x versions of the Azure Provider are able to opt-into certain functionality coming in version 2.0 of the Azure Provider.

This guide details how to enable these features and how you can submit feedback prior to the final release.

## Disclaimers

-> The functionality provided in this Beta is subject to change - as such we recommend **not using this Beta in Production**.

-> Whilst certain feature flags may be available in earlier versions of the Azure Provider they existed in an incomplete manner - **the Beta is only supported when using version 1.43 (or later) of the Azure Provider**.

-> The final 2.0 release will contain the [deprecations and resource removals outlined in the 2.0 Upgrade Guide](https://www.terraform.io/docs/providers/azurerm/guides/2.0-upgrade-guide.html) - however please note these **are not included in this Beta**

## Custom Timeouts

For technical/historical reasons 1.x versions of the Azure Provider have a hard-coded timeout of 3 hours after which the provisioning time of a resource would fail.

Version 2.0 of the Azure Provider introduces Custom Timeouts, which means that each resource comes with a default timeout (detailed in the documentation) which can be overridden (for example when a resource may take longer to provision in a specific scenario).

---

It's possible to opt into the Beta of Custom Timeouts by setting the Environment Variable `ARM_PROVIDER_CUSTOM_TIMEOUTS` to `true`.

On a macOS/Linux system you can do this via:

```bash
export ARM_PROVIDER_CUSTOM_TIMEOUTS=true
```

On a Windows System (in PowerShell) you can do this via:

```powershell
[System.Environment]::SetEnvironmentVariable('ARM_PROVIDER_CUSTOM_TIMEOUTS', 'true', [System.EnvironmentVariableTarget]::User)
```

-> **Note:** You may need to reload/re-open your Terminal after setting this Environment Variable.

Once this is done you should be able to specify Custom Timeouts in Terraform Resources, like so:

```
resource "azurerm_resource_group" "test" {
  # ...

  timeouts {
    create = "60m"
    delete = "2h"
  }
}
```

We've worked through adding what we believe are reasonable default timeouts for Resources - these timeouts can be found in the documentation for each Resource.

---

You can opt-out of this Beta by either removing the Environment Variable or setting it to `false`.

On a macOS/Linux system you can do this via:

```bash
export ARM_PROVIDER_CUSTOM_TIMEOUTS=false
```

On a Windows System (in PowerShell) you can do this via:

```powershell
[System.Environment]::SetEnvironmentVariable('ARM_PROVIDER_CUSTOM_TIMEOUTS', 'false', [System.EnvironmentVariableTarget]::User)
```

---

-> **Note:** If this Environment Variable isn't specified, you'll see the following error, since support for Custom Timeouts will be Disabled:

```
$ terraform plan

Error: Unsupported block type

  on main.tf line 5, in resource "azurerm_resource_group" "test":
   5:   timeouts {

Blocks of type "timeouts" are not expected here.
```

## New Resources for Virtual Machines & Virtual Machine Scale Sets

Version 2.0 of the Azure Provider will introduce support for several new resources, which supersede the existing `azurerm_virtual_machine` and `azurerm_virtual_machine_scale_set` resources:

- `azurerm_linux_virtual_machine`
- `azurerm_linux_virtual_machine_scale_set`
- `azurerm_virtual_machine_scale_set_extension`
- `azurerm_windows_virtual_machine`
- `azurerm_windows_virtual_machine_scale_set`

More details about why we've added these new resources [can be found in this Github issue](https://github.com/terraform-providers/terraform-provider-azurerm/issues/2807).

!> **Note:** The new Virtual Machine resources will automatically remove the OS Disk on Destroy - you can opt out of this by making your Provider block:

```
provider "azurerm" {
  features {
    virtual_machine {
      delete_os_disk_on_deletion = false
    }
}
```

Since this is a Behavioural change, in 2.x versions of the Provider the `features` block will become Required - however the inner elements (e.g. `virtual_machine`) will be Optional with defaults); complete documentation can be found [on the Provider Home Page](https://www.terraform.io/docs/providers/azurerm/index.html#argument-reference).

---

It's possible to opt into the Beta of these New Resources by setting the Environment Variable `ARM_PROVIDER_TWOPOINTZERO_RESOURCES` to `true`.

-> **Note:** If you opt-into this Beta we also recommend opting into the `Requiring Existing Resources to be Imported` Beta too.

On a macOS/Linux system you can do this via:

```bash
export ARM_PROVIDER_TWOPOINTZERO_RESOURCES=true
```

On a Windows System (in PowerShell) you can do this via:

```powershell
[System.Environment]::SetEnvironmentVariable('ARM_PROVIDER_TWOPOINTZERO_RESOURCES', 'true', [System.EnvironmentVariableTarget]::User)
```

-> **Note:** You may need to reload/re-open your Terminal after setting this Environment Variable.

Once this is done you should be able to use these New Resources as you would with any other resource:

```
resource "azurerm_linux_virtual_machine" "test" {
  # ...
}

resource "azurerm_linux_virtual_machine_scale_set" "test" {
  # ...
}

resource "azurerm_virtual_machine_scale_set_extension" "test" {
  # ...
}

resource "azurerm_windows_virtual_machine" "test" {
  # ...
}

resource "azurerm_windows_virtual_machine_scale_set" "test" {
  # ...
}
```

As with other Resources Terraform supports, Documentation for each of these resources is available on the Terraform Website:

- [`azurerm_linux_virtual_machine`](https://www.terraform.io/docs/providers/azurerm/r/linux_virtual_machine.html)
- [`azurerm_linux_virtual_machine_scale_set`](https://www.terraform.io/docs/providers/azurerm/r/linux_virtual_machine_scale_set.html)
- [`azurerm_virtual_machine_scale_set_extension`](https://www.terraform.io/docs/providers/azurerm/r/virtual_machine_scale_set_extension.html)
- [`azurerm_windows_virtual_machine`](https://www.terraform.io/docs/providers/azurerm/r/windows_virtual_machine.html)
- [`azurerm_windows_virtual_machine_scale_set`](https://www.terraform.io/docs/providers/azurerm/r/windows_virtual_machine_scale_set.html)

---

You can opt-out of this Beta by either removing the Environment Variable or setting it to `false`.

On a macOS/Linux system you can do this via:

```bash
export ARM_PROVIDER_TWOPOINTZERO_RESOURCES=false
```

On a Windows System (in PowerShell) you can do this via:

```powershell
[System.Environment]::SetEnvironmentVariable('ARM_PROVIDER_TWOPOINTZERO_RESOURCES', 'false', [System.EnvironmentVariableTarget]::User)
```

---

-> **Note:** If this Environment Variable isn't specified, you'll see the following error when trying to use any of these Resources, since the Azure Provider will Disable them:

```
$ terraform plan

Error: Invalid resource type

  on main.tf line 1, in resource "azurerm_linux_virtual_machine" "test":
   1: resource "azurerm_linux_virtual_machine" "test" {

The provider provider.azurerm does not support resource type
"azurerm_linux_virtual_machine".
```


## Requiring Existing Resources to be Imported

Terraform allows for existing resources which have been created outside of Terraform to be Imported into Terraform's State. Once a resource is imported into the state, it's possible for Terraform to track changes and manage this resource. The Azure Provider allows Importing existing resources into the state (using `terraform import`) for (almost) every resource.

Version 2.0 of the Azure Provider aims to solve an issue where it's possible to unintentionally import resources into the state by running `terraform apply`. To explain this further, the majority of Azure's API's are Upserts - which means that a resource will be updated if it exists, otherwise it'll be created.

Where the unique identifier for (most) Azure resources is the `name` (rather than for example an `aws_instance` where AWS will generate a different unique identifier) - it's possible that users may have unintentionally imported resources into Terraform when running `terraform apply` on an existing resource.

Whilst this may allow resources to work in some cases, it leads to hard-to-diagnose bugs in others (which could have been caught during `terraform plan`).

In order to match the behaviour of other Terraform Providers version 2.0 of the AzureRM Provider will require that existing resources are imported into the state prior to use. This means that Terraform will be checking for the presence of an existing resource prior to creating it - and will return an error similar to below:

```
A resource with the ID /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1 already exists - to be managed via Terraform this resource needs to be imported into the State. Please see the resource documentation for `azurerm_resource_group` for more information.
```

---

It's possible to opt into the Beta of Requiring Resources to be Imported by setting the Environment Variable `ARM_PROVIDER_STRICT` to `true`.

On a macOS/Linux system you can do this via:

```bash
export ARM_PROVIDER_STRICT=true
```

On a Windows System (in PowerShell) you can do this via:

```powershell
[System.Environment]::SetEnvironmentVariable('ARM_PROVIDER_STRICT', 'true', [System.EnvironmentVariableTarget]::User)
```

-> **Note:** You may need to reload/re-open your Terminal after setting this Environment Variable.

Once this feature is enabled, the Azure Provider will first check during creation of a resource if there's an existing resource which should be imported.

If an existing resource is found the following error message will be output:

```
$ terraform apply

...

azurerm_resource_group.test: Creating...

Error: A resource with the ID "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example" already exists - to be managed via Terraform this resource needs to be imported into the State. Please see the resource documentation for "azurerm_resource_group" for more information.
```

---

You can opt-out of this Beta by either removing the Environment Variable or setting it to `false`.

On a macOS/Linux system you can do this via:

```bash
export ARM_PROVIDER_STRICT=false
```

On a Windows System (in PowerShell) you can do this via:

```powershell
[System.Environment]::SetEnvironmentVariable('ARM_PROVIDER_STRICT', 'false', [System.EnvironmentVariableTarget]::User)
```

## Providing Feedback

Firstly - thanks for trialling the new functionality coming in version 2.0 of the Azure Provider.

We're keeping track of Beta Feedback in the Github Repository - as such [please follow this link to open an issue containing your feedback](https://github.com/terraform-providers/terraform-provider-azurerm/issues/new?template=Beta_Feedback.md).
