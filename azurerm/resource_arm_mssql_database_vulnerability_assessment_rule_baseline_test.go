package azurerm

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform/helper/resource"
	"github.com/hashicorp/terraform/terraform"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func TestAccAzureRMMssqlDatabaseVulnerabilityAssessmentRuleBaseline_basic(t *testing.T) {
	resourceName := "azurerm_mssql_database_vulnerability_assessment_rule_baseline.test"
	ri := tf.AccRandTimeInt()

	resource.ParallelTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testCheckAzureRMStorageAccountDatabaseDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccAzureRMMssqlDatabaseVulnerabilityAssessmentRuleBaseline_basic(ri, testLocation()),
				Check: resource.ComposeTestCheckFunc(
					testCheckAzureRMBaselineExists(resourceName),
					resource.TestCheckResourceAttr(resourceName, "rule_id", "VA2002"),
					resource.TestCheckResourceAttr(resourceName, "baseline_name", "default"),
					resource.TestCheckResourceAttr(resourceName, "baseline_result.#", "2"),
				),
			},
			{
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccAzureRMMssqlDatabaseVulnerabilityAssessmentRuleBaseline_master(t *testing.T) {
	resourceName := "azurerm_mssql_database_vulnerability_assessment_rule_baseline.test"
	ri := tf.AccRandTimeInt()
	resource.ParallelTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testCheckAzureRMStorageAccountDatabaseDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccAzureRMMssqlDatabaseVulnerabilityAssessmentRuleBaseline_master(ri, testLocation()),
				Check: resource.ComposeTestCheckFunc(
					testCheckAzureRMBaselineExists(resourceName),
					resource.TestCheckResourceAttr(resourceName, "rule_id", "VA2065"),
					resource.TestCheckResourceAttr(resourceName, "baseline_name", "master"),
					resource.TestCheckResourceAttr(resourceName, "baseline_result.#", "1"),
				),
			},
			{
				Config: testAccAzureRMDatabaseVulnerabilityAssessmentRuleBaseline_update(ri, testLocation()),
				Check: resource.ComposeTestCheckFunc(
					testCheckAzureRMBaselineExists(resourceName),
					resource.TestCheckResourceAttr(resourceName, "rule_id", "VA2065"),
					resource.TestCheckResourceAttr(resourceName, "baseline_name", "master"),
					resource.TestCheckResourceAttr(resourceName, "baseline_result.#", "2"),
				),
			},
		},
	})
}

func testCheckAzureRMBaselineExists(resourceName string) resource.TestCheckFunc {
	return func(s *terraform.State) error {

		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("resource not found: %s", resourceName)
		}

		resourceGroup := rs.Primary.Attributes["resource_group_name"]
		serverName := rs.Primary.Attributes["server_name"]
		databaseName := rs.Primary.Attributes["database_name"]
		ruleId := rs.Primary.Attributes["rule_id"]
		baselineName := expandBaselineName(rs.Primary.Attributes["baseline_name"])

		client := testAccProvider.Meta().(*ArmClient).sql.DatabaseVulnerabilityAssessmentRuleBaselinesClient
		ctx := testAccProvider.Meta().(*ArmClient).StopContext

		resp, err := client.Get(ctx, resourceGroup, serverName, databaseName, ruleId, *baselineName)
		if err != nil {
			if utils.ResponseWasNotFound(resp.Response) {
				return fmt.Errorf("baseline was not found for "+
					"resource group %q, sql server %q, database %q, rule id %q, baseline name %q",
					resourceGroup, serverName, databaseName, ruleId, *baselineName)
			}

			return err
		}

		return nil
	}
}

func testCheckAzureRMStorageAccountDatabaseDestroy(s *terraform.State) error {
	err := testCheckAzureRMStorageAccountDestroy(s)
	if err != nil {
		return err
	}

	return testCheckAzureRMSqlDatabaseDestroy(s)
}

func testAccAzureRMMssqlDatabaseVulnerabilityAssessmentRuleBaseline_basic(rInt int, location string) string {

	database := testAccAzureRMMssqlDatabaseVulnerabilityAssessmentRuleBaseline_database(rInt, location)

	return fmt.Sprintf(`
%s

resource "azurerm_mssql_database_vulnerability_assessment_rule_baseline" "test" {
  resource_group_name = "${azurerm_resource_group.test.name}"
  server_name         = "${azurerm_sql_server.test.name}"
  database_name       = "${azurerm_sql_database.test.name}"
  rule_id             = "VA2002"
  baseline_name       = "default"
  baseline_result {
    result = [
      "SCHEMA",
      "dbo",
      "CONTROL",
      "SQL_USER",
      "adminuser1"
    ]
  }
  baseline_result {
    result = [
      "SCHEMA",
      "dbo",
      "CONTROL",
      "SQL_USER",
      "adminuser2"
    ]
  }

  depends_on = [
    "azurerm_template_deployment.vulnerability_scan_settings"
  ]
}
`, database)
}

func testAccAzureRMMssqlDatabaseVulnerabilityAssessmentRuleBaseline_master(rInt int, location string) string {

	database := testAccAzureRMMssqlDatabaseVulnerabilityAssessmentRuleBaseline_database(rInt, location)

	return fmt.Sprintf(`
%s

resource "azurerm_mssql_database_vulnerability_assessment_rule_baseline" "test" {
  resource_group_name = "${azurerm_resource_group.test.name}"
  server_name         = "${azurerm_sql_server.test.name}"
  database_name       = "${azurerm_sql_database.test.name}"
  rule_id             = "VA2065"
  baseline_name       = "master"
  baseline_result {
    result = [
      "clientip",
      "255.255.255.255",
      "255.255.255.255"
    ]
  }

  depends_on = [
    "azurerm_template_deployment.vulnerability_scan_settings"
  ]
}
`, database)
}

func testAccAzureRMDatabaseVulnerabilityAssessmentRuleBaseline_update(rInt int, location string) string {

	database := testAccAzureRMMssqlDatabaseVulnerabilityAssessmentRuleBaseline_database(rInt, location)

	return fmt.Sprintf(`
%s

resource "azurerm_mssql_database_vulnerability_assessment_rule_baseline" "test" {
  resource_group_name = "${azurerm_resource_group.test.name}"
  server_name         = "${azurerm_sql_server.test.name}"
  database_name       = "${azurerm_sql_database.test.name}"
  rule_id             = "VA2065"
  baseline_name       = "master"
  baseline_result {
    result = [
      "clientips",
      "255.255.255.255",
      "255.255.255.255"
    ]
  }
  baseline_result {
    result = [
      "myip",
      "255.255.255.0",
      "255.255.255.0"
    ]
  }

  depends_on = [
    "azurerm_template_deployment.vulnerability_scan_settings"
  ]
}
`, database)
}

func testAccAzureRMMssqlDatabaseVulnerabilityAssessmentRuleBaseline_database(rInt int, location string) string {
	return fmt.Sprintf(`
resource "azurerm_resource_group" "test" {
  name     = "acctestRG-%d"
  location = "%s"
}

resource "azurerm_sql_server" "test" {
  name                         = "acctestsqlserver%d"
  resource_group_name          = "${azurerm_resource_group.test.name}"
  location                     = "${azurerm_resource_group.test.location}"
  version                      = "12.0"
  administrator_login          = "mradministrator"
  administrator_login_password = "thisIsDog11"
}

resource "azurerm_storage_account" "test" {
  name                     = "accsa%d"
  resource_group_name      = "${azurerm_resource_group.test.name}"
  location                 = "%s"
  account_tier             = "Standard"
  account_replication_type = "GRS"
}

resource "azurerm_storage_container" "test" {
  name                  = "acctestsc%d"
  resource_group_name   = "${azurerm_resource_group.test.name}"
  storage_account_name  = "${azurerm_storage_account.test.name}"
  container_access_type = "private"
}

resource "azurerm_template_deployment" "vulnerability_scan_settings" {
  name                = "acctestvss-%d"
  resource_group_name = "${azurerm_resource_group.test.name}"
  deployment_mode     = "Incremental"

  parameters = {
    "sqlServerName"      = "${azurerm_sql_server.test.name}"
    "storageAccountName" = "${azurerm_storage_account.test.name}"
    "blobContainerName"  = "${azurerm_storage_container.test.name}"
  }

  depends_on = [ "azurerm_sql_database.test" ]

	template_body = <<DEPLOY
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "sqlServerName": {
      "type": "string"
    },
    "storageAccountName": {
      "type": "string"
    },
    "blobContainerName": {
      "type": "string"
    }
  },
  "resources": [
    {
      "apiVersion": "2017-03-01-preview",
      "type": "Microsoft.Sql/servers/securityAlertPolicies",
      "name": "[concat(parameters('sqlServerName'), '/DefaultSecurityPolicy')]",
      "properties": {
        "state": "Enabled",
        "emailAddresses": ["support@azure.microsoft.com"],
        "emailAccountAdmins": false
      }
    },
    {
      "type": "Microsoft.Sql/servers/vulnerabilityAssessments",
      "name": "[concat(parameters('sqlServerName'), '/Default')]",
      "apiVersion": "2018-06-01-preview",
      "scale": null,
      "properties": {
        "storageContainerPath": "[concat('https', '://', parameters('storageAccountName'), '.blob.core.windows.net/', parameters('blobContainerName'), '/')]",
        "storageAccountAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
      }
    }
  ]
}
DEPLOY
}

resource "azurerm_sql_database" "test" {
  name                = "acctestdb%d"
  resource_group_name = "${azurerm_resource_group.test.name}"
  server_name         = "${azurerm_sql_server.test.name}"
  location            = "${azurerm_resource_group.test.location}"
  edition             = "Standard"
}
`, rInt, location, rInt, rInt, location, rInt, rInt, rInt)
}
